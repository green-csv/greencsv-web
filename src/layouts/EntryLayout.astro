---
import type { CollectionEntry } from "astro:content";
import '@fontsource/ibm-plex-mono';
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import FormattedDate from "../components/FormattedDate.astro";
import {ClientRouter} from "astro:transitions";

type Props = CollectionEntry<"entry">["data"] & { lang?: string; slug?: string };
const { title, description, pubDate, updatedDate, tags, cover, author, lang = "en", slug } = Astro.props;

const isoPublishDate = pubDate instanceof Date ? pubDate.toISOString() : new Date(pubDate).toISOString();
const isoUpdateDate = updatedDate ? (updatedDate instanceof Date ? updatedDate.toISOString() : new Date(updatedDate).toISOString()) : isoPublishDate;

const articleStructuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": cover ? new URL(cover, Astro.url).toString() : undefined,
  "datePublished": isoPublishDate,
  "dateModified": isoUpdateDate,
  "author": {
    "@type": "Person",
    "name": author || "GREEN|CSV"
  },
  "publisher": {
    "@type": "Organization",
    "name": "GREEN|CSV",
    "logo": {
      "@type": "ImageObject",
      "url": new URL("/image.png", Astro.url).toString()
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.toString()
  },
  "keywords": tags?.join(', ')
};
---

<html lang={lang} data-theme="dark">
 <head>
		<BaseHead
			title={title}
			description={description}
			keywords={tags?.join(', ')}
			image={cover}
			author={author}
		/>
    <ClientRouter />

    <!-- Article-specific structured data -->
    <script type="application/ld+json" set:html={JSON.stringify(articleStructuredData)}></script>
	</head>

	<body class="antialiased bg-gray-900">
		<Header />
		<main>
			<article>
				<div
					class="px-4 py-10 max-w-3xl mx-auto sm:px-6 sm:py-12 lg:max-w-4xl lg:py-16 lg:px-8 xl:max-w-6xl"
				>
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1 class="flex-1 font-mono text-4xl text-teal-300">{title}</h1>

						<p class="mt-2 font-mono text-gray-300 mb-6 flex flex-wrap gap-2">
							{tags && tags.map((tag) => (
								<span class="bg-teal-800 text-teal-200 px-2 py-0.5 rounded">
									{tag}
								</span>
							))}
						</p>
					</div>

          <div class="prose  lg:prose-lg dark:prose-invert mx-auto">
            <slot  />
          </div>

					<div class="mt-6 mb-10 max-w-3xl mx-auto">
						<script
							src="https://giscus.app/client.js"
							data-repo="green-csv/greencsv-web"
							data-repo-id="R_kgDOOsvfVA"
							data-category="Announcements"
							data-category-id="DIC_kwDOOsvfVM4CqWfd"
							data-mapping="title"
							data-strict="0"
							data-reactions-enabled="1"
							data-emit-metadata="0"
							data-input-position="top"
							data-theme="noborder_dark"
							data-lang="en"
							crossorigin="anonymous"
							async></script>
					</div>
				</div>
			</article>
		</main>
	</body>
</html>
